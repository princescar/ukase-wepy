<template>
  <view class="container" wx:if="{{gym && charge}}">
    <view class="card">
      <view class="title">锻炼总时长</view>
      <view class="time">{{charge.duration}}</view>
      <view class="date">{{charge.outTimeString}}</view>
      <view class="detail-wrapper">
        <view class="title">详情</view>
        <view class="item">入场时间：{{charge.inTimeString}}</view>
        <view class="item">出场时间：{{charge.outTimeString}}</view>
        <view class="item">课程：无</view>
      </view>
      <view class="total-wrapper">
        总费用
        <text class="currency">¥</text>
        <text class="amount">{{charge.amount}}</text>
      </view>
      <view class="charge-list-wrapper">
        <view class="charge-list" wx:if="{{detailOpen}}">
          <view class="item" wx:for="{{charge.detail}}" wx:key="id">
            <view>{{item.startString}}到{{item.endString}}</view>
            <view>{{item.price}}元/小时</view>
          </view>
        </view>
        <view class="toggle-button {{detailOpen ? 'on' : 'off'}}">计费详情</view>
      </view>
    </view>
    <view class="actions">
      <view class="tip">课程时间内不另计费，课程前后10分钟不计费</view>
      <button class="block-button primary" @tap="pay">确认</button>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy'
import dayjs from 'dayjs'
import humanizeDuration from 'humanize-duration'
import API from '../api'

export default class extends wepy.page {
  config = {
    navigationBarTitleText: '出场',
    backgroundColor: '#657B8C',
    backgroundColorTop: '#657B8C',
    backgroundColorBottom: '#657B8C'
  }

  data = {
    id: null,
    gym: null,
    charge: null,
    detailOpen: false
  }

  methods = {
    async pay() {
      try {
        if (this.charge && this.charge.amount > 0) {
          const { params } = await API.pay(this.charge.orderNo)
          const paramsObj = JSON.parse(params)
          await wepy.requestPayment(paramsObj)
        } else {
          await API.zeroPay(this.charge.orderNo)
        }
        await wepy.showModal({
          content: '成功出场，欢迎您下次光临',
          showCancel: false
        })
        wepy.switchTab({ url: '/pages/tab-gyms' })
      } catch (e) {
        await wepy.showModal({
          content: '成功失败，请重试',
          showCancel: false
        })
        await this.loadData()
      }
    }
  }

  async loadData() {
    this.gym = await API.getGym(this.id)
    this.charge = await API.leave(this.id)
    const { inTime, outTime } = this.charge
    this.charge.inTimeString = dayjs(inTime).format('YYYY-MM-DD HH:mm')
    this.charge.outTimeString = dayjs(outTime).format('YYYY-MM-DD HH:mm')
    this.charge.duration = humanizeDuration(dayjs(outTime) - dayjs(inTime), {
      language: 'zh_CN',
      units: ['h', 'm'],
      maxDecimalPoints: 0,
      spacer: '',
      delimiter: ''
    })
    this.charge.detail = JSON.parse(this.charge.chargeDetail)
    this.charge.detail.forEach(item => {
      const { start, end } = item
      item.startString = dayjs(start).format('HH:mm')
      item.endString = dayjs(end).format('HH:mm')
    })
    this.$apply()
  }

  onLoad(opts) {
    this.id = opts.id
    this.loadData()
  }
}
</script>

<style lang="scss">
.container {
  padding-bottom: calc(100px + env(safe-area-inset-bottom));
  background-color: #657B8C;
}
.card {
  margin: 20px;
  border-radius: 4px;
  min-height: 474px;
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: #fff;
  .title {
    margin-top: 70px;
    font-size: 17px;
  }
  .time {
    margin-top: 35px;
    font-size: 34px;
    font-weight: 500;
  }
  .date {
    margin-top: 8px;
    font-size: 15px;
    color: #999;
  }
}

.actions {
  position: fixed;
  left: 0;
  right: 0;
  bottom: 10px;
  bottom: env(safe-area-inset-bottom);
  bottom: unquote('max(10px, env(safe-area-inset-bottom))');
  margin: 0 20px;
  .tip {
    margin: 15px;
    text-align: center;
    font-size: 12px;
    color: rgba(255,255,255,.5);
  }
}
</style>
